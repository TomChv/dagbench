package daggerexec

import (
	"regexp"
	"strings"
	"unicode"
)

func stripANSI(s string) string {
	var ansi = regexp.MustCompile(`\x1b\[[0-9;?]*[ -/]*[@-~]`) // CSI sequences

	return ansi.ReplaceAllString(s, "")
}

func convertFunctionNameToTraceMarker(s string) string {
	s = strings.ReplaceAll(s, "-", " ")
	s = strings.ReplaceAll(s, "_", " ")

	return ToLowerCamel(s)
}

// NOTE: Generated by AI for conveniance
func ToLowerCamel(s string) string {
	// split into words (letters/digits only)
	var words []string
	var b strings.Builder

	for _, r := range s {
		if unicode.IsLetter(r) || unicode.IsDigit(r) {
			b.WriteRune(unicode.ToLower(r))
		} else {
			if b.Len() > 0 {
				words = append(words, b.String())
				b.Reset()
			}
		}
	}
	if b.Len() > 0 {
		words = append(words, b.String())
	}

	if len(words) == 0 {
		return ""
	}

	// first word stays lowercased; subsequent words capitalized
	out := words[0]
	for _, w := range words[1:] {
		out += capitalizeFirstLetter(w)
	}
	return out
}

// NOTE: Generated by AI for conveniance
func capitalizeFirstLetter(w string) string {
	var b strings.Builder
	capped := false
	for _, r := range w {
		if !capped && unicode.IsLetter(r) {
			b.WriteRune(unicode.ToUpper(r))
			capped = true
		} else {
			b.WriteRune(r)
		}
	}
	return b.String()
}
